{"version":3,"sources":["actions/videoActions.ts","actions/actionTypes.ts","App.tsx","serviceWorker.js","reducers/VideoReducer.ts","reducers/index.ts","store/index.ts","index.js"],"names":["URL_BASE","URL_REQUEST","PARAMS","part","maxresults","key","fetchLoadResults","q","dispatch","a","axios","get","params","request","items","data","console","log","loadResults","results","type","value","initialState","searchText","resultSelected","connect","state","videoState","props","useState","setState","useEffect","resultsHTML","map","r","className","onClick","id","videoId","src","snippet","thumbnails","default","url","title","description","onChange","e","target","width","height","frameBorder","allow","allowFullScreen","Boolean","window","location","hostname","match","Reducers","combineReducers","action","Store","createStore","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98ab6f22.chunk.js","sourcesContent":["//https://www.googleapis.com/youtube/v3/search?part=id,snippet&q=react&maxresults=20&key=AIzaSyB2qPOWZw7J7GJ5rRjpL_tkfi4shZckQaE\nimport axios from \"axios\";\nimport { LOAD_RESULTS } from \"./actionTypes\";\nimport { IResult } from \"../reducers/VideoReducer\";\nconst API_KEY = \"AIzaSyB2qPOWZw7J7GJ5rRjpL_tkfi4shZckQaE\"\nconst VERSION_API = \"v3\"\nconst URL_BASE = `https://www.googleapis.com/youtube/${VERSION_API}`;\nconst ENDPOINT = \"search\";\nconst URL_REQUEST = `${URL_BASE}/${ENDPOINT}`;\nconst PARAMS = {\n    part: \"id,snippet\",\n    maxresults: 20,\n    key: API_KEY\n};\n\n\nexport const fetchLoadResults = (q: string = \"react\") => {\n    return async (dispatch: any) => {\n        let request = await axios.get(URL_REQUEST, {params: {...PARAMS, q: q}});\n        const { items } = request.data;\n        console.log(items);\n        dispatch(loadResults(items))\n    }\n}\n\nexport const loadResults = (results: IResult[] = []) => {\n    return {\n        type: LOAD_RESULTS,\n        value: results\n    };\n}","export const LOAD_RESULTS = \"LOAD_RESULTS\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { fetchLoadResults } from './actions';\nimport { IResult } from './reducers/VideoReducer';\n\ninterface IReducerState {\n    results: IResult[],\n}\n\ninterface IReducerDispatch {\n    fetchLoadResults: (q?: string) => void\n}\n\ninterface IProps extends IReducerState, IReducerDispatch {\n\n}\n\ninterface IState {\n    searchText: string,\n    resultSelected: IResult | null\n}\n\nconst initialState: IState = {\n    searchText: \"\",\n    resultSelected: null\n}\n\nconst App = (props: IProps) => {\n\n    const { results } = props;\n\n    const { fetchLoadResults } = props;\n\n    const [state, setState] = useState(initialState);\n\n    const { searchText, resultSelected } = state;\n\n    useEffect(() => {\n        fetchLoadResults();\n    }, []);\n    \n    const resultsHTML = results.map(r => \n        <div className = \"result-app\" onClick = {() => setState({...state, resultSelected: r.id.videoId ? r : null})}>\n            <div className = \"result-column\">\n                <img src = {r.snippet.thumbnails.default.url} />\n            </div>\n            <div className = \"result-column\">\n                <span className = \"result-title\">\n                    {r.snippet.title}\n                </span>\n                <span className = \"result-description\">\n                    {r.snippet.description}\n                </span>\n            </div>\n        </div>\n    );\n\n    return (\n        <div className = \"app\">\n            <div className = \"app-header\">\n                <div className = \"hamburguer-app\">\n                    <div className = \"hamburguer-line\"></div>\n                    <div className = \"hamburguer-line\"></div>\n                    <div className = \"hamburguer-line\"></div>\n                </div>\n                <div className = \"youtube-icon\">\n                    <div className = \"arrow-right\"></div>\n                </div>\n                <input value = {searchText}\n                    onChange = {(e: any) => setState({...state, searchText: e.target.value})} />\n                <div className = \"button-app\" onClick = {() => fetchLoadResults(searchText)}>\n                    <div className = \"magnifier-app\">\n                        <div className = \"circle\"></div>\n                        <div className = \"handhold\"></div>\n                    </div>\n                </div>\n            </div>\n            <div className = \"app-body\">\n                <div className = \"video-holder\">\n                    {resultSelected && resultSelected.id.videoId &&\n                    <iframe width=\"100%\" height=\"315\" \n                        src={`https://www.youtube.com/embed/${resultSelected.id.videoId}`} frameBorder=\"0\"\n                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen></iframe>}\n                </div>\n                <div className = \"results\">\n                    {resultsHTML}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        results: state.videoState.results\n    };\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        fetchLoadResults: (q: string = \"react\") => dispatch(fetchLoadResults(q))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOAD_RESULTS } from \"../actions/actionTypes\"\n\ninterface IAction {\n    type: string,\n    value: any\n}\n\nexport interface IResult {\n    kind: string,\n    etag: string,\n    id: {\n        kind: string\n        channelId?: string,\n        videoId?: string\n    },\n    snippet: {\n        publishedAt: string, //\"2013-07-30T10:19:47.000Z\",\n        channelId?: string,\n        title: string,\n        description: string,\n        thumbnails: {\n            default: {\n                url: string\n            },\n            medium: {\n                url: string\n            },\n            high: {\n                url: string\n            }\n        },\n        channelTitle: string,\n        liveBroadcastContent: string\n    }\n}\n\ninterface IReducerState {\n    results: IResult[]\n}\n\nconst initialState: IReducerState = {\n    results: []\n}\n\nexport const VideoReducer = (state: IReducerState = initialState, action: IAction) => {\n    switch(action.type){\n        case LOAD_RESULTS:\n            return {\n                ...state,\n                results: action.value\n            }\n        default:\n            return state;\n    }\n}","import { VideoReducer } from \"./VideoReducer\";\nimport { combineReducers } from \"redux\";\n\nexport const Reducers =  combineReducers({\n    videoState: VideoReducer\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunk from \"redux-thunk\";\nimport { Reducers } from '../reducers';\n\nexport const Store = createStore(Reducers, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { Store } from './store';\n\nReactDOM.render(\n    <Provider store = {Store}>\n        <App />\n    </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}